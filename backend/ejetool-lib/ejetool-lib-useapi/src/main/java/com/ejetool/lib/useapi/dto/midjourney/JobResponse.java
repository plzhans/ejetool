package com.ejetool.lib.useapi.dto.midjourney;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;

/**
 * status : 200
 * {
 *     "jobid": "<jobid>",
 *     "verb": "imagine",
 *     "status": "completed",
 *     "created": "2023-09-09T02:04:49.667Z",
 *     "updated": "2023-09-09T02:19:20.256Z",
 *     "prompt": "Steampunk cat",
 *     "children": [
 *         {
 *             "button": "U1",
 *             "jobid": "<jobid>",
 *             "messageId": "<Discord message id>"
 *         },
 *         {
 *             "button": "U2",
 *             "jobid": "<jobid>",
 *             "messageId": "<Discord message id>"
 *         },
 *         {
 *             "messageId": "<Discord message id>",
 *             "button": "U3",
 *             "jobid": "<jobid>"
 *         }
 *     ],
 *     "buttons": [
 *         "U1",
 *         "U2",
 *         "U3",
 *         "U4",
 *         "üîÑ",
 *         "V1",
 *         "V2",
 *         "V3",
 *         "V4"
 *     ],
 *     "discord": "<ABC‚Ä¶secured‚Ä¶xyz>",
 *     "channel": "<Discord channel id>",
 *     "server": "<Discord server id>",
 *     "maxJobs": 3,
 *     "messageId": "<Discord message id>",
 *     "content": "**Steampunk cat --s 750 --v 5.2** - <@Discord user id> (fast)",
 *     "timestamp": "2023-09-09T02:05:24.991000+00:00",
 *     "attachments": [
 *         {
 *             "url": "<generated image url>",
 *             "proxy_url": "<generated proxy image url>",
 *             "width": 2048,
 *             "height": 2048,
 *             "content_type": "<generated image type>",
 *             "id": "<Discord image id>",
 *             "filename": "<generated image name>",
 *             "size": 7204115
 *         }
 *     ],
 *     "code": 200
 * }
 */
@Getter
public class JobResponse {
    /**  */
    private String error;

    /**  */
    private String errorDetails;

    /**  */
    private int code;

    /**  */
    @JsonProperty("jobid")
    private String jobId;

    /**  */
    @JsonProperty("parentJobId")
    private String parentJobId;

    /**
     * verb
     * {@link JobVerb}
     */
    private String verb;
          
    /**
     * ÏÉÅÌÉú
     * {@link JobStatus}
     */
    private String status;

    @Getter
    public static class Seed {
        /**
         * Parsed seed number
         */
        private long value;

        /**
         * Original content message returned by Midjourney for a seed request
         */
        private String content;
    }

    /**  */
    private Seed seed;
         
    /**
     * YYYY-MM-DDTHH:mm:ss.sssZ, IS0 8601, UTC
     */
    private String created;

    /**
     * YYYY-MM-DDTHH:mm:ss.sssZ, IS0 8601, UTC
     */
    private String updated;

    /**  */
    private String prompt;

    /**  */
    private List<String> blendUrls;

    /** Portrait, Square, Landscape */
    private String blendDimensions;
    
    /**  */
    private String describeUrl;
    
    /** 
     * Î≤ÑÌäº
     * {@link JobButton} 
     */
    private String button;

    @Getter
    public static class Child {
        /**  */
        private String messageId;

        /** 
         * Î≤ÑÌäº
         * {@link JobButton} 
         */
        private String button;

        /**  */
        @JsonProperty("jobid")
        private String jobId;
    }

    private List<Child> children;

    /** 
     * Î≤ÑÌäº Î™©Î°ù
     * {@link JobButton} 
     */
    private List<String> buttons;

    /**
     * Provided for debugging purposes only, contains the first 3 and the last 3 characters of the original value
     */
    private String discord;

    /**  */
    private String channel;

    /**  */
    private String server;

    /**  */
    private int maxJobs;

    /**  */
    private String messageId;

    /**
     * Contains message generated by Midjourney reflecting current generation parameters and progress
     */
    private String content;

    /**  */
    private String timestamp;

    /**  */
    private List<JobAttachment> attachments;

    @Getter
    private class Embed {
        /**  */
        private String type;

        /**  */
        private String description;

        /**  */
        private JobImage image;
    }

    /**  */
    private List<Embed> embeds;

    /**
     * 
     * @param code
     * @param error
     * @param errorDetails
     * @return
     */
    public static JobResponse createError(String jobId, int code, String error, String errorDetails) {
        var inst = new JobResponse();
        inst.jobId = jobId;
        inst.code = code;
        inst.error = error;
        inst.errorDetails = errorDetails;
        return inst;
    }

    public boolean isSucceed(){
        return this.code == 200;
    }
}
