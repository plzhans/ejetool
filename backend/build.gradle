plugins { 
	id 'java'
	id 'org.springframework.boot' version '3.2.7'
	id 'io.spring.dependency-management' version '1.1.5'
}
  
bootJar {
	enabled = false
}

jar {
	enabled = false
}

allprojects {

	group = 'com.ejetool'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '22'
	targetCompatibility = '22'

	repositories {
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

	sourceCompatibility = '22'
	targetCompatibility = '22'
  
    dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-aop'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'

		compileOnly 'org.projectlombok:lombok:1.18.32'
		testCompileOnly 'org.projectlombok:lombok:1.18.32'
 
		implementation 'org.mapstruct:mapstruct:1.5.5.Final'
		implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

		annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
		testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
		annotationProcessor 'org.projectlombok:lombok:1.18.32'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
	}

	configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}

	sourceSets {
		main {
			resources {
				if (project.hasProperty('release')) {
					exclude '**/application-*.properties'
					exclude '**/application-*.yml'
				}
			}
		}
	}

	task buildAndCopy(type: Copy) {
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE
		
		copy {
			from('Dockerfile') {
				rename { String fileName ->
					"${project.name}.Dockerfile"
				}
			}
			into "$buildDir"
		}

		if (System.getProperty('outputDir')) {
			from('build/libs'){
				include '**/*SNAPSHOT.jar'
				rename { String fileName ->
					"${project.name}.jar"
				}
			}
			into file("${rootDir}/${System.getProperty('outputDir')}") 
			
			from('build'){
				include '*.Dockerfile'
			}
			into file("${rootDir}/${System.getProperty('outputDir')}") 
		}
	}

	tasks.build {
		finalizedBy buildAndCopy
	}
}